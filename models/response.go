// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Response response
//
// swagger:model Response
type Response []*ResponseItems0

// Validate validates this response
func (m Response) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this response based on the context it is used
func (m Response) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {
			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ResponseItems0 response items0
//
// swagger:model ResponseItems0
type ResponseItems0 struct {

	// header
	// Required: true
	Header *Header `json:"Header"`

	// id
	// Required: true
	ID *string `json:"_id"`

	// last write date
	// Required: true
	// Format: date-time
	LastWriteDate *strfmt.DateTime `json:"lastWriteDate"`

	// some other Id
	// Required: true
	SomeOtherID *string `json:"someOtherId"`
}

// Validate validates this response items0
func (m *ResponseItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastWriteDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSomeOtherID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseItems0) validateHeader(formats strfmt.Registry) error {

	if err := validate.Required("Header", "body", m.Header); err != nil {
		return err
	}

	if m.Header != nil {
		if err := m.Header.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Header")
			}
			return err
		}
	}

	return nil
}

func (m *ResponseItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("_id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ResponseItems0) validateLastWriteDate(formats strfmt.Registry) error {

	if err := validate.Required("lastWriteDate", "body", m.LastWriteDate); err != nil {
		return err
	}

	if err := validate.FormatOf("lastWriteDate", "body", "date-time", m.LastWriteDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResponseItems0) validateSomeOtherID(formats strfmt.Registry) error {

	if err := validate.Required("someOtherId", "body", m.SomeOtherID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this response items0 based on the context it is used
func (m *ResponseItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseItems0) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	if m.Header != nil {
		if err := m.Header.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Header")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResponseItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseItems0) UnmarshalBinary(b []byte) error {
	var res ResponseItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
