// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Header header
//
// swagger:model header
type Header struct {

	// amount
	// Required: true
	Amount *float64 `json:"amount"`

	// creation date
	// Required: true
	// Format: date-time
	CreationDate *strfmt.DateTime `json:"creationDate"`

	// error code
	// Required: true
	ErrorCode *string `json:"errorCode"`

	// is identical transaction
	// Required: true
	IsIdenticalTransaction *string `json:"isIdenticalTransaction"`

	// modified by
	// Required: true
	ModifiedBy *string `json:"modifiedBy"`

	// modified on
	// Required: true
	// Format: date-time
	ModifiedOn *strfmt.DateTime `json:"modifiedOn"`

	// source service type
	// Required: true
	SourceServiceType *string `json:"sourceServiceType"`

	// transaction Id
	// Required: true
	TransactionID *string `json:"transactionId"`

	// transaction status
	// Required: true
	TransactionStatus *string `json:"transactionStatus"`
}

// Validate validates this header
func (m *Header) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsIdenticalTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceServiceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Header) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *Header) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", m.CreationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Header) validateErrorCode(formats strfmt.Registry) error {

	if err := validate.Required("errorCode", "body", m.ErrorCode); err != nil {
		return err
	}

	return nil
}

func (m *Header) validateIsIdenticalTransaction(formats strfmt.Registry) error {

	if err := validate.Required("isIdenticalTransaction", "body", m.IsIdenticalTransaction); err != nil {
		return err
	}

	return nil
}

func (m *Header) validateModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("modifiedBy", "body", m.ModifiedBy); err != nil {
		return err
	}

	return nil
}

func (m *Header) validateModifiedOn(formats strfmt.Registry) error {

	if err := validate.Required("modifiedOn", "body", m.ModifiedOn); err != nil {
		return err
	}

	if err := validate.FormatOf("modifiedOn", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Header) validateSourceServiceType(formats strfmt.Registry) error {

	if err := validate.Required("sourceServiceType", "body", m.SourceServiceType); err != nil {
		return err
	}

	return nil
}

func (m *Header) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transactionId", "body", m.TransactionID); err != nil {
		return err
	}

	return nil
}

func (m *Header) validateTransactionStatus(formats strfmt.Registry) error {

	if err := validate.Required("transactionStatus", "body", m.TransactionStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this header based on context it is used
func (m *Header) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Header) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Header) UnmarshalBinary(b []byte) error {
	var res Header
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
