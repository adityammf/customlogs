// Code generated by go-swagger; DO NOT EDIT.

package log_preserve

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetPreserveParams creates a new GetPreserveParams object
//
// There are no default values defined in the spec.
func NewGetPreserveParams() GetPreserveParams {

	return GetPreserveParams{}
}

// GetPreserveParams contains all the bound params for the get preserve operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetPreserve
type GetPreserveParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Report will be generated for transactions done from this date.
	  Required: true
	  In: query
	*/
	FromDate string
	/*Report will be generated for transactions done before this date.Default value : current date
	  In: query
	*/
	ToDate *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetPreserveParams() beforehand.
func (o *GetPreserveParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFromDate, qhkFromDate, _ := qs.GetOK("fromDate")
	if err := o.bindFromDate(qFromDate, qhkFromDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qToDate, qhkToDate, _ := qs.GetOK("toDate")
	if err := o.bindToDate(qToDate, qhkToDate, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFromDate binds and validates parameter FromDate from query.
func (o *GetPreserveParams) bindFromDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("fromDate", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("fromDate", "query", raw); err != nil {
		return err
	}
	o.FromDate = raw

	return nil
}

// bindToDate binds and validates parameter ToDate from query.
func (o *GetPreserveParams) bindToDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ToDate = &raw

	return nil
}
